import 'package:flutter/material.dart';import 'package:flutter_bloc/flutter_bloc.dart';import 'package:flutter_food_app/config/theme.dart';import 'package:flutter_food_app/data/global_data.dart';import 'package:flutter_food_app/data/home_data_model.dart';import 'package:flutter_food_app/presentation/widgets/circle_progressbar.dart';import 'package:flutter_food_app/presentation/widgets/ui_helper.dart';import 'appbar_actons.dart';import 'bloc/home_bloc_cubit.dart';import 'navigation_drawer.dart';class HomeScreen extends StatefulWidget {  @override  _HomeScreenState createState() => _HomeScreenState();}class _HomeScreenState extends State<HomeScreen> with TickerProviderStateMixin {  HomeBlocCubit homeBlocCubit = HomeBlocCubit();  TabController tabController;  @override  void initState() {    homeBlocCubit.getFoodMenu();    super.initState();  }  @override  void didChangeDependencies() {    super.didChangeDependencies();  }  @override  Widget build(BuildContext context) {    return Scaffold(      backgroundColor: Colors.white,      appBar: AppBar(        actions: [buildActions(context)],      ),      drawer: buildDrawer(context),      body: BlocBuilder(        cubit: homeBlocCubit,        builder: (context, state) {          print('State--------------$state');          if (state is HomeDataResponse) {            tabController = TabController(                vsync: this,                length: GlobalData.homeDataModel?.tableMenuList?.length ?? 0);            return Column(              children: [                TabBar(                  controller: tabController,                  isScrollable: true,                  indicatorColor: Colors.pink,                  unselectedLabelColor: Colors.black,                  labelColor: Colors.pink,                  labelStyle: Theme.of(context).textTheme.subtitle1,                  tabs: List.generate(                    GlobalData.homeDataModel.tableMenuList.length,                    (index) => Tab(                      text: GlobalData.homeDataModel?.tableMenuList[index]                              ?.menuCategory ??                          '',                    ),                  ),                ),                Expanded(                  child: TabBarView(                    controller: tabController,                    children: buildTabBarList(),                  ),                ),              ],            );          } else if (state is Loading) {            return showCircleProgress();          } else {            return Text(AppStrings.errorMsg);          }        },      ),    );  }  List<Widget> buildTabBarList() {    return List.generate(      GlobalData.homeDataModel.tableMenuList.length,      (index) => ListView.builder(        shrinkWrap: true,        itemCount: GlobalData                .homeDataModel.tableMenuList[index]?.categoryDishes?.length ??            0,        itemBuilder: (context, index2) {          CategoryDish categoryDish = GlobalData              .homeDataModel.tableMenuList[index]?.categoryDishes[index2];          return Column(            children: [              Padding(                padding: const EdgeInsets.symmetric(horizontal: 8),                child: Row(                  children: [                    Expanded(                      flex: 7,                      child: Padding(                        padding: const EdgeInsets.all(8.0),                        child: Column(                          crossAxisAlignment: CrossAxisAlignment.start,                          children: [                            Text(categoryDish?.dishName ?? '',                                style: Theme.of(context)                                    .textTheme                                    .bodyText1                                    .copyWith(fontWeight: FontWeight.bold)),                            verticalSpaceSmall,                            Row(                              mainAxisAlignment: MainAxisAlignment.spaceBetween,                              children: [                                Text(                                    'â‚¹ ' + categoryDish.dishPrice?.toString() ??                                        '',                                    style: Theme.of(context)                                        .textTheme                                        .bodyText2                                        .copyWith(fontWeight: FontWeight.bold)),                                Text(                                    categoryDish.dishCalories                                            ?.toInt()                                            .toString() +                                        ' Calories',                                    style: Theme.of(context)                                        .textTheme                                        .bodyText2                                        .copyWith(fontWeight: FontWeight.bold))                              ],                            ),                            verticalSpaceSmall,                            Text(categoryDish?.dishDescription ?? '',                                style: Theme.of(context).textTheme.bodyText2),                            verticalSpaceSmall,                            SizedBox(                              width: 120,                              height: 40,                              child: Container(                                decoration: BoxDecoration(                                    color: Colors.green,                                    borderRadius: BorderRadius.circular(20)),                                child: Row(                                  children: <Widget>[                                    IconButton(                                      icon: new Icon(Icons.remove,                                          color: Colors.white),                                      onPressed: categoryDish.cartedItem > 0                                          ? () {                                              setState(() {                                                categoryDish.cartedItem--;                                                if (categoryDish.cartedItem ==                                                    0) {                                                  GlobalData.cartItems                                                      .remove(categoryDish);                                                  GlobalData.cartItems = [                                                    ...{...GlobalData.cartItems}                                                  ];                                                  print(GlobalData.cartItems);                                                }                                              });                                            }                                          : null,                                    ),                                    Text(categoryDish.cartedItem.toString(),                                        style: Theme.of(context)                                            .textTheme                                            .bodyText2                                            .copyWith(color: Colors.white)),                                    IconButton(                                        icon: new Icon(                                          Icons.add,                                          color: Colors.white,                                        ),                                        onPressed: () {                                          setState(() {                                            categoryDish.cartedItem++;                                            GlobalData.cartItems                                                .add(categoryDish);                                            GlobalData.cartItems = [                                              ...{...GlobalData.cartItems}                                            ];                                            print(GlobalData.cartItems);                                          });                                        })                                  ],                                ),                              ),                            ),                            verticalSpaceSmall,                            Text(                                categoryDish.addonCat.isNotEmpty                                    ? 'Customization Available'                                    : '',                                style: Theme.of(context)                                    .textTheme                                    .bodyText2                                    .copyWith(color: Colors.red)),                          ],                        ),                      ),                    ),                    Expanded(                      flex: 3,                      child: Image.network(                        categoryDish?.dishImage ?? '',                        height: 130,                        width: 80,                        fit: BoxFit.cover,                      ),                    )                  ],                ),              ),              Divider(                color: AppColors.darkGray,              )            ],          );        },      ),    );  }}